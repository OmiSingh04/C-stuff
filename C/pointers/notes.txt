pointers store the address of a variable.
they occupy twice the number of bytes occupied by the variable. probably because using indirection (*) on pointers gives the value at the address and it is stored in half of those bytes.
i think.


since pointers are also variables, you can have pointers pointing to pointers too.
this doesnt mean the second pointer will take twice the bytes of the first pointer.
int a is 4 bytes
int *p = &a
p is 8 bytes

p is like any other variable.
it has an integer value
it has an address
it has twice the size, and i really think its cause of when you use indirection.

int **q = &p

q is also like any other variable
it has an address, and a value
q occupies 8 bytes as its a pointer pointer to some value

this is a low level concept. 
java, python, javascript, etc and other high level languages dont have the concept of pointers.

even when you allocate dynamic memory, the functions to do those return pointers to those free blocks.

im going over the basics again and again
i eventually have to try some project or this is all for nothing.


